<?php

/**
 * @file
 * Mailchimp rules module.
 */

use \Mailchimp\MailchimpLists;
use \Mailchimp\MailchimpAPIException;

/**
 * Returns a new instance of an MailChimp API class.
 *
 * @param string $class_name
 *   The class name you want an instance from.
 * @param string $api_key
 *   The MailChimp api key to use if not the default, which is retrieved from
 *   the variable mailchimp_api_key.
 *
 * @return object||null
 *   Either an instance of an MailChimp API class or NULL, if the library is
 *   missing or could not be loaded.
 */
function mailchimp_rules_get_api_object($class_name = 'Mailchimp', $api_key = NULL) {
  $class_name = 'Mailchimp\\' . $class_name;

  // todo: allow the mailchimp library to be installed via libraries.

  // Check if the composer autoload file loaded the mailchimp library.
  if (!class_exists($class_name)) {
    watchdog('mailchimp_rules', 'Failed to load MailChimp PHP library. Please refer to the installation requirements.', array(), WATCHDOG_ERROR);
    drupal_set_message(t('Failed to load MailChimp PHP library. Please refer to the installation requirements.'), 'error', FALSE);

    return NULL;
  }

  if (!$api_key) {
    $api_key = variable_get('mailchimp_api_key');
  }

  if (empty($api_key)) {
    watchdog('mailchimp_rules', 'Please set an API key for the MailChimp integration.', array(), WATCHDOG_ERROR);
    drupal_set_message(t('Please set an API key for the MailChimp integration.'), 'error', FALSE);
  }

  // Set the timeout to something that won't take down the Drupal site:
  $timeout = 60;

  return new $class_name($api_key, 'apikey', $timeout);
}

/**
 * Retrieves the lists for the set API key.
 *
 * @return array
 *   A list of MailChimp lists with the id as key and name as value.
 */
function mailchimp_rules_retrieve_lists() {
  $lists_api = mailchimp_rules_get_api_object('MailchimpLists');

  $lists = array();
  try {
    // Only get the first 500 for now.
    $res = $lists_api->getLists(array('count' => 500));

    foreach ($res->lists as $list) {
      $lists[$list->id] = $list->name;
    }
  }
  catch (MailchimpAPIException $exception) {
    watchdog('mailchimp_rules', 'Could not retrieve the mailchimp lists.', array(), WATCHDOG_ERROR);
    drupal_set_message(t('Could not retrieve the mailchimp lists.'), 'error', FALSE);
  }

  return $lists;
}

/**
 * Subscribes the given user to the given list.
 *
 * @param string $list_id
 *   The ID for the list to which the mail should be subscribed.
 * @param string $mail
 *   The mail address the should be subscribed.
 * @param array $merge_fields
 *   An associative array of merge fields to be synced, using the key for the
 *   tag/name and the value for the merge fields value.
 * @param bool $double_optin
 *   Set to true if the the subscription sould require a double opt in.
 */
function mailchimp_rules_subscribe_mail($list_id, $mail, $merge_fields = array(), $double_optin = FALSE) {
  $lists_api = mailchimp_rules_get_api_object('MailchimpLists');

  try {
    $parameters = array(
      'status' => ($double_optin) ? MailchimpLists::MEMBER_STATUS_PENDING : MailchimpLists::MEMBER_STATUS_SUBSCRIBED,
    );

    if (!empty($merge_fields)) {
      $parameters['merge_fields'] = $merge_fields;
    }

    $lists_api->addOrUpdateMember($list_id, $mail, $parameters);
  }
  catch (MailchimpAPIException $exception) {
    $params = array(
      '@mail' => $mail,
      '@list_id' => $list_id,
    );
    watchdog('mailchimp_rules', 'Could not subscribe mail @mail to mailchimp list with id @list_id.', $params, WATCHDOG_ERROR);
    drupal_set_message(t('Could not subscribe mail @mail to mailchimp list with id @list_id.', $params), 'error', FALSE);
  }
}

/**
 * Unsubscribe the given user from the given list.
 *
 * @param string $list_id
 *   The ID for the list to which the mail should be subscribed.
 * @param string $mail
 *   The mail address the should be subscribed.
 */
function mailchimp_rules_unsubscribe_mail($list_id, $mail) {
  $lists_api = mailchimp_rules_get_api_object('MailchimpLists');

  try {
    $lists_api->removeMember($list_id, $mail);
  }
  catch (MailchimpAPIException $exception) {
    $params = array(
      '@mail' => $mail,
      '@list_id' => $list_id,
    );
    watchdog('mailchimp_rules', 'Could not subscribe mail @mail to mailchimp list with id @list_id.', $params, WATCHDOG_ERROR);
    drupal_set_message(t('Could not subscribe mail @mail to mailchimp list with id @list_id.', $params), 'error', FALSE);
  }
}
